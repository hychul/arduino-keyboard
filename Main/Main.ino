/*
 * ----------------------------------------------------------------------------
 * "THE BEER-WARE LICENSE" (Revision 42):
 * <hychome@gmail.com> wrote this file. As long as you retain this notice you
 * can do whatever you want with this stuff. If we meet some day, and you think
 * this stuff is worth it, you can buy me a beer in return.
 * ----------------------------------------------------------------------------
 */
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
 
#define ROW_0 0
#define ROW_1 1
#define ROW_2 2
#define ROW_3 3
#define ROW_4 4

#define COL_0 7
#define COL_1 8
#define COL_2 9
#define COL_3 10
#define COL_4 21
#define COL_5 20
#define COL_6 19
#define COL_7 18
#define COL_8 17
#define COL_9 16
#define COL_10 15
#define COL_11 14
#define COL_12 13
#define COL_13 12
#define COL_14 11

#define WIN_LAYER 0
#define MAC_LAYER 1
#define FN_LAYER 2

#define KEY_NONE 0
#define KEY_FUNCTION 1
#define KEY_ACTION 2

#define MODIFIERKEY_OPTION MODIFIERKEY_ALT
#define MODIFIERKEY_COMMAND MODIFIERKEY_GUI

#define ACTION_NONE 99
#define ACTION_MOUSE_UP 0
#define ACTION_MOUSE_DOWN 1
#define ACTION_MOUSE_LEFT 2
#define ACTION_MOUSE_RIGHT 3
#define ACTION_MOUSE_LEFT_CLICK 4
#define ACTION_MOUSE_RIGHT_CLICK 5
#define ACTION_MAC_INPUT_SOURCE 6
#define ACTION_LAYER_CHANGE 7

/*
 * +----------------------+
 * |         Main         |
 * +----------------------+
 */

void setup() {
  setupKeyboard();
  setupMouse();
  setupRotary();
  setupRotaryButton();
  setupOled();
}

void loop() {
  updateKeyboard();
  updateMouse();
  updateRotary();
  updateRotaryButton();
  updateOled();
}

/*
 * +----------------------+
 * |         Mouse        |
 * +----------------------+
 */
 
signed char mouseX = 0;
signed char mouseY = 0;
signed char mouseSpeed = 3;

/*
 * +----------------------+
 * |       Keyboard       |
 * +----------------------+
 */

int keyLayer = MAC_LAYER;

int rows[] = {ROW_0, ROW_1, ROW_2, ROW_3, ROW_4};
int columns[] = {COL_0, COL_1, COL_2, COL_3, COL_4, COL_5, COL_6, COL_7, COL_8, COL_9, COL_10, COL_11, COL_12, COL_13, COL_14};

struct Key {
  unsigned int code;
  unsigned char action;

  bool isDown() {
    return code != KEY_NONE || action != ACTION_NONE;
  }

  unsigned int getCode() {
    if (action != ACTION_NONE) {
      return KEY_ACTION;
    }
    return code;
  }

  void init() {
    code = KEY_NONE;
    action = ACTION_NONE;
  }
};

typedef void (*VoidFuncPtr)(void);

Key keys[3][5][15] = {
  { // WIN Layer
    {{KEY_ESC, ACTION_NONE}, {KEY_1, ACTION_NONE}, {KEY_2, ACTION_NONE}, {KEY_3, ACTION_NONE}, {KEY_4, ACTION_NONE}, {KEY_5, ACTION_NONE}, {KEY_6, ACTION_NONE}, {KEY_7, ACTION_NONE}, {KEY_8, ACTION_NONE}, {KEY_9, ACTION_NONE}, {KEY_0, ACTION_NONE}, {KEY_MINUS, ACTION_NONE}, {KEY_EQUAL, ACTION_NONE}, {KEY_BACKSPACE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}},
    {{KEY_TAB, ACTION_NONE}, {KEY_Q, ACTION_NONE}, {KEY_W, ACTION_NONE}, {KEY_E, ACTION_NONE}, {KEY_R, ACTION_NONE}, {KEY_T, ACTION_NONE}, {KEY_Y, ACTION_NONE}, {KEY_U, ACTION_NONE}, {KEY_I, ACTION_NONE}, {KEY_O, ACTION_NONE}, {KEY_P, ACTION_NONE}, {KEY_LEFT_BRACE, ACTION_NONE}, {KEY_RIGHT_BRACE, ACTION_NONE}, {KEY_BACKSLASH, ACTION_NONE}, {KEY_DELETE, ACTION_NONE}},
    {{KEY_CAPS_LOCK, ACTION_NONE}, {KEY_A, ACTION_NONE}, {KEY_S, ACTION_NONE}, {KEY_D, ACTION_NONE}, {KEY_F, ACTION_NONE}, {KEY_G, ACTION_NONE}, {KEY_H, ACTION_NONE}, {KEY_J, ACTION_NONE}, {KEY_K, ACTION_NONE}, {KEY_L, ACTION_NONE}, {KEY_SEMICOLON, ACTION_NONE}, {KEY_QUOTE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_RETURN, ACTION_NONE}, {KEY_NONE, ACTION_NONE}},
    {{KEY_LEFT_SHIFT, ACTION_NONE}, {KEY_Z, ACTION_NONE}, {KEY_X, ACTION_NONE}, {KEY_C, ACTION_NONE}, {KEY_V, ACTION_NONE}, {KEY_B, ACTION_NONE}, {KEY_N, ACTION_NONE}, {KEY_M, ACTION_NONE}, {KEY_COMMA, ACTION_NONE}, {KEY_PERIOD, ACTION_NONE}, {KEY_SLASH, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_RIGHT_SHIFT, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_UP_ARROW, ACTION_NONE}},
    {{MODIFIERKEY_ALT, ACTION_NONE}, {MODIFIERKEY_GUI, ACTION_NONE}, {MODIFIERKEY_CTRL, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_SPACE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {MODIFIERKEY_RIGHT_ALT, ACTION_NONE}, {MODIFIERKEY_RIGHT_CTRL, ACTION_NONE}, {KEY_FUNCTION, ACTION_NONE}, {KEY_LEFT_ARROW, ACTION_NONE}, {KEY_DOWN_ARROW, ACTION_NONE}, {KEY_RIGHT_ARROW, ACTION_NONE}},
  },
  { // Mac Layer
    {{KEY_ESC, ACTION_NONE}, {KEY_1, ACTION_NONE}, {KEY_2, ACTION_NONE}, {KEY_3, ACTION_NONE}, {KEY_4, ACTION_NONE}, {KEY_5, ACTION_NONE}, {KEY_6, ACTION_NONE}, {KEY_7, ACTION_NONE}, {KEY_8, ACTION_NONE}, {KEY_9, ACTION_NONE}, {KEY_0, ACTION_NONE}, {KEY_MINUS, ACTION_NONE}, {KEY_EQUAL, ACTION_NONE}, {KEY_BACKSPACE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}},
    {{KEY_TAB, ACTION_NONE}, {KEY_Q, ACTION_NONE}, {KEY_W, ACTION_NONE}, {KEY_E, ACTION_NONE}, {KEY_R, ACTION_NONE}, {KEY_T, ACTION_NONE}, {KEY_Y, ACTION_NONE}, {KEY_U, ACTION_NONE}, {KEY_I, ACTION_NONE}, {KEY_O, ACTION_NONE}, {KEY_P, ACTION_NONE}, {KEY_LEFT_BRACE, ACTION_NONE}, {KEY_RIGHT_BRACE, ACTION_NONE}, {KEY_BACKSLASH, ACTION_NONE}, {KEY_DELETE, ACTION_NONE}},
    {{KEY_CAPS_LOCK, ACTION_NONE}, {KEY_A, ACTION_NONE}, {KEY_S, ACTION_NONE}, {KEY_D, ACTION_NONE}, {KEY_F, ACTION_NONE}, {KEY_G, ACTION_NONE}, {KEY_H, ACTION_NONE}, {KEY_J, ACTION_NONE}, {KEY_K, ACTION_NONE}, {KEY_L, ACTION_NONE}, {KEY_SEMICOLON, ACTION_NONE}, {KEY_QUOTE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_RETURN, ACTION_NONE}, {KEY_NONE, ACTION_NONE}},
    {{KEY_LEFT_SHIFT, ACTION_NONE}, {KEY_Z, ACTION_NONE}, {KEY_X, ACTION_NONE}, {KEY_C, ACTION_NONE}, {KEY_V, ACTION_NONE}, {KEY_B, ACTION_NONE}, {KEY_N, ACTION_NONE}, {KEY_M, ACTION_NONE}, {KEY_COMMA, ACTION_NONE}, {KEY_PERIOD, ACTION_NONE}, {KEY_SLASH, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_RIGHT_SHIFT, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_UP_ARROW, ACTION_NONE}},
    {{MODIFIERKEY_CTRL, ACTION_NONE}, {MODIFIERKEY_OPTION, ACTION_NONE}, {MODIFIERKEY_COMMAND, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_SPACE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_MAC_INPUT_SOURCE}, {MODIFIERKEY_OPTION, ACTION_NONE}, {KEY_FUNCTION, ACTION_NONE}, {KEY_LEFT_ARROW, ACTION_NONE}, {KEY_DOWN_ARROW, ACTION_NONE}, {KEY_RIGHT_ARROW, ACTION_NONE}},
  },
  {
    {{KEY_TILDE, ACTION_NONE}, {KEY_F1, ACTION_NONE}, {KEY_F2, ACTION_NONE}, {KEY_F3, ACTION_NONE}, {KEY_F4, ACTION_NONE}, {KEY_F5, ACTION_NONE}, {KEY_F6, ACTION_NONE}, {KEY_F7, ACTION_NONE}, {KEY_F8, ACTION_NONE}, {KEY_F9, ACTION_NONE}, {KEY_F10, ACTION_NONE}, {KEY_F11, ACTION_NONE}, {KEY_F12, ACTION_NONE}, {KEY_BACKSPACE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}},
    {{KEY_NONE, ACTION_LAYER_CHANGE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_MOUSE_UP}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_INSERT, ACTION_NONE}},
    {{KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_MOUSE_LEFT}, {KEY_NONE, ACTION_MOUSE_DOWN}, {KEY_NONE, ACTION_MOUSE_RIGHT}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_RETURN, ACTION_NONE}, {KEY_NONE, ACTION_NONE}},
    {{KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_MOUSE_LEFT_CLICK}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_MOUSE_RIGHT_CLICK}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_RIGHT_SHIFT, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_PAGE_UP, ACTION_NONE}},
    {{KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {MODIFIERKEY_RIGHT_ALT, ACTION_NONE}, {MODIFIERKEY_RIGHT_CTRL, ACTION_NONE}, {KEY_FUNCTION, ACTION_NONE}, {KEY_HOME, ACTION_NONE}, {KEY_PAGE_DOWN, ACTION_NONE}, {KEY_END, ACTION_NONE}},
  }
};

Key tildeKey = {KEY_TILDE, ACTION_NONE};

VoidFuncPtr actions[8][2] = {
  {[]() { Mouse.move(0, -mouseSpeed); }, []() {}}, 
  {[]() { Mouse.move(0, mouseSpeed); }, []() {}}, 
  {[]() { Mouse.move(-mouseSpeed, 0); }, []() {}},
  {[]() { Mouse.move(mouseSpeed, 0); }, []() {}},
  {[]() { Mouse.press(MOUSE_LEFT); }, []() { Mouse.release(MOUSE_LEFT); }},
  {[]() { Mouse.press(MOUSE_RIGHT); }, []() { Mouse.release(MOUSE_RIGHT); }},
  {[]() { Keyboard.press(MODIFIERKEY_CTRL); Keyboard.press(KEY_SPACE); }, []() { Keyboard.release(MODIFIERKEY_CTRL); Keyboard.release(KEY_SPACE); }},
  {[]() { keyLayer = keyLayer == MAC_LAYER ? WIN_LAYER : MAC_LAYER; }, []() {}}, 
  
};

Key downKeys[5][15] = {
  {{KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}},
  {{KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}},
  {{KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}},
  {{KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}},
  {{KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}, {KEY_NONE, ACTION_NONE}}
};

/*
 * +----------------------+
 * |        Rotary        |
 * +----------------------+
 */

#define ROTARTY_PIN_CLK 23 // Connected pin number to CLK on KY-040
#define ROTARTY_PIN_DT 24 // Connected pin numbder to DT on KY-040
#define ROTARTY_PIN_SW 22 // Connected pin numbder to SW on KY-040
#define ROTARTY_BTN_RATE_MS 100 // Mininum rotary button recognition milli second

int lastRotaryVal;
boolean isClockwise;
int encoderPosCount = 0;

int lastRotaryButtonVal;
unsigned long lastRotaryButtonMs = 0;

/*
 * +----------------------+
 * |         Oled         |
 * +----------------------+
 */
 
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 32 // OLED display height, in pixels
 
// On an arduino TEENSY 2.0: 6(SDA),  5(SCL)
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

bool isOledLoaded = false;
bool isOledValidated = false;
